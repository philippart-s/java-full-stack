{
  "4.02-configure-k8s-client": {
    "body": [
      "# use K3s as Kubernetes for dev environment",
      "quarkus.kubernetes-client.devservices.flavor=k3s",
      "quarkus.kubernetes-client.devservices.override-kubeconfig=true",
      ""
    ],
    "description": "",
    "prefix": "4.02-configure-k8s-client",
    "scope": ""
  },
  "4.05-add-name-hw-spec": {
    "body": [
      "private String name;",
      "",
      "public void setName(String name) {",
      "    this.name = name;",
      "}",
      "",
      "public String getName() {",
      "    return name;",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.05-add-name-hw-spec",
    "scope": "java"
  },
  "4.07-log-hw-reconcile": {
    "body": [
      "log.info(\"üëã Hello, World üåè! From {} \", resource.getSpec().getName());",
      ""
    ],
    "description": "",
    "prefix": "4.07-log-hw-reconcile",
    "scope": "java"
  },
  "4.08-add-cleanup-hw-reconcile": {
    "body": [
      "@Override",
      "public DeleteControl cleanup(HelloWorldOperator resource, Context\u003cHelloWorldOperator\u003e context) throws Exception {",
      "    log.info(\"ü•≤  Goodbye, World üåè! From {}\", resource.getSpec().getName());",
      "",
      "    return DeleteControl.defaultDelete();",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.08-add-cleanup-hw-reconcile",
    "scope": "java"
  },
  "4.10-add-jarvis-operator-spec": {
    "body": [
      "private String deploy;",
      "",
      "public String getDeploy() {",
      "    return deploy;",
      "}",
      "",
      "public void setDeploy(String deploy) {",
      "    this.deploy = deploy;",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.10-add-jarvis-operator-spec",
    "scope": "java"
  },
  "4.11-add-jarvis-operator-status": {
    "body": [
      "private String deployedRelase;",
      "",
      "public String getDeployedRelase() {",
      "  return deployedRelase;",
      "}",
      "",
      "public void setDeployedRelase(String deployedRelase) {",
      "  this.deployedRelase = deployedRelase;",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.11-add-jarvis-operator-status",
    "scope": "java"
  },
  "4.12-add-reconciler-var": {
    "body": [
      "// Flag to know if the operator must deploy the application on a new event.",
      "private String deploy = \"‚ùå\";",
      "",
      "// ID of the created custom resource.",
      "private ResourceID resourceID;",
      "",
      "// Current deployed release.",
      "private String currentRelease;",
      "",
      "// Fabric0 kubernetes client.",
      "private final KubernetesClient client;",
      "",
      "// To manage external event",
      "private SimpleInboundEventSource simpleInboundEventSource;",
      "",
      "public JarvisOperatorReconciler(KubernetesClient client) {",
      "    this.client = client;",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.12-add-reconciler-var",
    "scope": "java"
  },
  "4.13-add-event-source": {
    "body": [
      "@Produces",
      "public SimpleInboundEventSource createSimpleInboundEventSource() {",
      "    return new SimpleInboundEventSource();",
      "}",
      "",
      "@Override",
      "public List\u003cEventSource\u003c?, JarvisOperator\u003e\u003e prepareEventSources(EventSourceContext\u003cJarvisOperator\u003e context) {",
      "    simpleInboundEventSource = createSimpleInboundEventSource();",
      "",
      "    return List.of(simpleInboundEventSource);",
      "}    ",
      ""
    ],
    "description": "",
    "prefix": "4.13-add-event-source",
    "scope": "java"
  },
  "4.14-create-deployment": {
    "body": [
      "private Deployment makeDeployment(String currentRelease, JarvisOperator jarvisOperator) {",
      "    Deployment deployment = new DeploymentBuilder()",
      "            .withNewMetadata()",
      "                .withName(\"jarvis-deployment\")",
      "                .addToLabels(\"app\", \"jarvis\")",
      "            .endMetadata()",
      "            .withNewSpec()",
      "                .withReplicas(1)",
      "                .withNewSelector()",
      "                    .withMatchLabels(Map.of(\"app\", \"jarvis\"))",
      "                .endSelector()",
      "            .withNewTemplate()",
      "                .withNewMetadata()",
      "                    .addToLabels(\"app\", \"jarvis\")",
      "                .endMetadata()",
      "                .withNewSpec()",
      "                    .addNewContainer()",
      "                        .withName(\"jarvis\")",
      "                        .withImage(\"95y036e0.gra7.container-registry.ovh.net/devoxx/jarvis-app\" + \":\" + currentRelease)",
      "                        .withEnvFrom(new EnvFromSourceBuilder()",
      "                                            .withNewSecretRef(\"devoxx-secrets\", false)",
      "                                            .build())",
      "                        .addNewPort()",
      "                            .withContainerPort(80)",
      "                        .endPort()",
      "                    .endContainer()",
      "                .endSpec()",
      "            .endTemplate()",
      "        .endSpec()",
      "    .build();",
      "",
      "    //deployment.addOwnerReference(jarvisOperator);",
      "",
      "    _LOG.info(\"Generated deployment {}\", Serialization.asYaml(deployment));",
      "",
      "    return deployment;",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.14-create-deployment",
    "scope": "java"
  },
  "4.15-create-service": {
    "body": [
      "private Service makeService(JarvisOperator jarvisOperator) {",
      "    Service service = new ServiceBuilder()",
      "            .withNewMetadata()",
      "                .withName(\"jarvis-service\")",
      "                .addToLabels(\"app\", \"jarvis\")",
      "            .endMetadata()",
      "            .withNewSpec()",
      "                .withType(\"NodePort\")",
      "                .withSelector(Map.of(\"app\", \"jarvis\"))",
      "                    .addNewPort()",
      "                        .withPort(80)",
      "                        .withTargetPort(new IntOrString(8080))",
      "                        .withNodePort(30080)",
      "                    .endPort()",
      "            .endSpec()",
      "    .build();",
      "",
      "    //service.addOwnerReference(jarvisOperator);",
      "",
      "    _LOG.info(\"Generated service {}\", Serialization.asYaml(service));",
      "",
      "    return service;",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.15-create-service",
    "scope": "java"
  },
  "4.16-namespace-and-status": {
    "body": [
      "// Get namespace and status",
      "String namespace = resource.getMetadata().getNamespace();",
      "String statusDeployedRelease = (resource.getStatus() != null ? resource.getStatus().getDeployedRelase() : \"\");",
      "",
      "deploy = resource.getSpec().getDeploy();",
      "_LOG.info(\"Deploy Jarvis ? {}\", deploy);",
      "",
      "// Get configuration",
      "resourceID = ResourceID.fromResource(resource);",
      ""
    ],
    "description": "",
    "prefix": "4.16-namespace-and-status",
    "scope": "java"
  },
  "4.17-deploy-jarvis": {
    "body": [
      "if (\"‚úÖ\".equalsIgnoreCase(deploy) \u0026\u0026 currentRelease != null \u0026\u0026 currentRelease.trim().length() != 0",
      "            \u0026\u0026 !currentRelease.equalsIgnoreCase(statusDeployedRelease)) {",
      "    // 4.18-make-deployment",
      "",
      "    // 4.19-make-service",
      "",
      "    // 4.20-update-status",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.17-deploy-jarvis",
    "scope": "java"
  },
  "4.18-make-deployment": {
    "body": [
      "// Create deployment application",
      "_LOG.info(\"üîÄ Deploy the new release {} !\", currentRelease);",
      "Deployment deployment = makeDeployment(currentRelease, resource);",
      "Deployment existingDeployment = client.apps().deployments().inNamespace(namespace)",
      "        .withName(deployment.getMetadata().getName()).get();",
      "if (existingDeployment == null) {",
      "    client.apps().deployments().inNamespace(namespace).resource(deployment).create();",
      "} else {",
      "    client.apps().deployments().inNamespace(namespace).resource(deployment).update();",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.18-make-deployment",
    "scope": "java"
  },
  "4.19-make-service": {
    "body": [
      "// Create service",
      "Service service = makeService(resource);",
      "Service existingService = client.services().inNamespace(resource.getMetadata().getNamespace())",
      "        .withName(service.getMetadata().getName()).get();",
      "if (existingService == null) {",
      "    client.services().inNamespace(namespace).resource(service).create();",
      "} else {",
      "    client.services().inNamespace(namespace).resource(service).update();",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.19-make-service",
    "scope": "java"
  },
  "4.20-update-status": {
    "body": [
      "// Update the status",
      "if (resource.getStatus() != null) {",
      "    resource.getStatus().setDeployedRelase(currentRelease);",
      "} else {",
      "    JarvisOperatorStatus jarvisOperatorStatus = new JarvisOperatorStatus();",
      "    jarvisOperatorStatus.setDeployedRelase(currentRelease);",
      "    resource.setStatus(jarvisOperatorStatus);",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.20-update-status",
    "scope": "java"
  },
  "4.21-apply-status-patch": {
    "body": [
      "return UpdateControl.patchStatus(resource);",
      ""
    ],
    "description": "",
    "prefix": "4.21-apply-status-patch",
    "scope": "java"
  },
  "4.22-add-fire-event-method": {
    "body": [
      "public void fireEvent(String tag) {",
      "    if (resourceID != null) {",
      "        currentRelease = tag;",
      "        simpleInboundEventSource.propagateEvent(resourceID);",
      "    } else {",
      "        _LOG.info(\"üö´ No resource created, nothing to do.\");",
      "    }",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.22-add-fire-event-method",
    "scope": "java"
  },
  "4.24-add-ref-and-ref-type-fields": {
    "body": [
      "private String ref;",
      "private String ref_type;",
      "",
      "public String getRef() {",
      "  return ref;",
      "}",
      "public void setRef(String ref) {",
      "  this.ref = ref;",
      "}",
      "public String getRef_type() {",
      "  return ref_type;",
      "}",
      "public void setRef_type(String ref_type) {",
      "  this.ref_type = ref_type;",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.24-add-ref-and-ref-type-fields",
    "scope": "java"
  },
  "4.25-inject-jarvis-operator": {
    "body": [
      "@Inject",
      "private JarvisOperatorReconciler jarvisOperator;",
      ""
    ],
    "description": "",
    "prefix": "4.25-inject-jarvis-operator",
    "scope": "java"
  },
  "4.26-add-new-tag-method": {
    "body": [
      "@POST",
      "@Path(\"/event\")",
      "@Consumes(MediaType.APPLICATION_JSON)",
      "public Response newTag(GHTagEvent tagEvent) {",
      "  _LOG.info(\"‚öìÔ∏è Webhook called!!!!\");",
      "",
      "  if (\"tag\".equalsIgnoreCase(tagEvent.getRef_type())) {",
      "    _LOG.info(\"üéâ New tag: {}\", tagEvent.getRef());",
      "  }",
      "",
      "  jarvisOperator.fireEvent(tagEvent.getRef());",
      "  return Response.ok().build();",
      "}",
      ""
    ],
    "description": "",
    "prefix": "4.26-add-new-tag-method",
    "scope": "java"
  },
  "4.33-packaging-configuration": {
    "body": [
      "# Image configuration",
      "quarkus.container-image.build=true",
      "quarkus.container-image.group=devoxx",
      "quarkus.container-image.name=jarvis-operator",
      "quarkus.container-image.registry=95y036e0.gra7.container-registry.ovh.net",
      "",
      "# Kubernetes configuration",
      "quarkus.kubernetes.namespace=jarvis-operator",
      ""
    ],
    "description": "",
    "prefix": "4.33-packaging-configuration",
    "scope": ""
  }
}