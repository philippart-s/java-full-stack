snippet 4.02-configure-k8s-client:
  prefix: "4.02-configure-k8s-client"
  name: "4.02-configure-k8s-client"
  body: |
    # use K3s as Kubernetes for dev environment
    quarkus.kubernetes-client.devservices.flavor=k3s
    quarkus.kubernetes-client.devservices.override-kubeconfig=true

snippet 4.05-add-name-hw-spec:
  prefix: "4.05-add-name-hw-spec"
  name: "4.05-add-name-hw-spec"
  scope: "java"
  body: |
    private String name;

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

snippet 4.07-log-hw-reconcile:
  prefix: "4.07-log-hw-reconcile"
  name: "4.07-log-hw-reconcile"
  scope: "java"
  body: |
    log.info("üëã Hello, World üåè! From {} ", resource.getSpec().getName());

snippet 4.08-add-cleanup-hw-reconcile:
  prefix: "4.08-add-cleanup-hw-reconcile"
  name: "4.08-add-cleanup-hw-reconcile"
  scope: "java"
  body: |
    @Override
    public DeleteControl cleanup(HelloWorldOperator resource, Context<HelloWorldOperator> context) throws Exception {
        log.info("ü•≤  Goodbye, World üåè! From {}", resource.getSpec().getName());

        return DeleteControl.defaultDelete();
    }

snippet 4.10-add-jarvis-operator-spec:
  prefix: "4.10-add-jarvis-operator-spec"
  name: "4.10-add-jarvis-operator-spec"
  scope: "java"
  body: |
    private String deploy;

    public String getDeploy() {
        return deploy;
    }

    public void setDeploy(String deploy) {
        this.deploy = deploy;
    }

snippet 4.11-add-jarvis-operator-status:
  prefix: "4.11-add-jarvis-operator-status"
  name: "4.11-add-jarvis-operator-status"
  scope: "java"
  body: |
    private String deployedRelase;

    public String getDeployedRelase() {
      return deployedRelase;
    }

    public void setDeployedRelase(String deployedRelase) {
      this.deployedRelase = deployedRelase;
    }

snippet 4.12-add-reconciler-var:
  prefix: "4.12-add-reconciler-var"
  name: "4.12-add-reconciler-var"
  scope: "java"
  body: |
    // Flag to know if the operator must deploy the application on a new event.
    private String deploy = "‚ùå";

    // ID of the created custom resource.
    private ResourceID resourceID;

    // Current deployed release.
    private String currentRelease;

    // Fabric0 kubernetes client.
    private final KubernetesClient client;

    // To manage external event
    private SimpleInboundEventSource simpleInboundEventSource;

    public JarvisOperatorReconciler(KubernetesClient client) {
        this.client = client;
    }

snippet 4.13-add-event-source:
  prefix: "4.13-add-event-source"
  name: "4.13-add-event-source"
  scope: "java"
  body: |
    @Produces
    public SimpleInboundEventSource createSimpleInboundEventSource() {
        return new SimpleInboundEventSource();
    }

    @Override
    public List<EventSource<?, JarvisOperator>> prepareEventSources(EventSourceContext<JarvisOperator> context) {
        simpleInboundEventSource = createSimpleInboundEventSource();

        return List.of(simpleInboundEventSource);
    }    

snippet 4.14-create-deployment:
  prefix: "4.14-create-deployment"
  name: "4.14-create-deployment"
  scope: "java"
  body: |
    private Deployment makeDeployment(String currentRelease, JarvisOperator jarvisOperator) {
        Deployment deployment = new DeploymentBuilder()
                .withNewMetadata()
                    .withName("jarvis-deployment")
                    .addToLabels("app", "jarvis")
                .endMetadata()
                .withNewSpec()
                    .withReplicas(1)
                    .withNewSelector()
                        .withMatchLabels(Map.of("app", "jarvis"))
                    .endSelector()
                .withNewTemplate()
                    .withNewMetadata()
                        .addToLabels("app", "jarvis")
                    .endMetadata()
                    .withNewSpec()
                        .addNewContainer()
                            .withName("jarvis")
                            .withImage("95y036e0.gra7.container-registry.ovh.net/devoxx/jarvis-app" + ":" + currentRelease)
                            .withEnvFrom(new EnvFromSourceBuilder()
                                                .withNewSecretRef("devoxx-secrets", false)
                                                .build())
                            .addNewPort()
                                .withContainerPort(80)
                            .endPort()
                        .endContainer()
                    .endSpec()
                .endTemplate()
            .endSpec()
        .build();

        //deployment.addOwnerReference(jarvisOperator);

        _LOG.info("Generated deployment {}", Serialization.asYaml(deployment));

        return deployment;
    }

snippet 4.15-create-service:
  prefix: "4.15-create-service"
  name: "4.15-create-service"
  scope: "java"
  body: |
    private Service makeService(JarvisOperator jarvisOperator) {
        Service service = new ServiceBuilder()
                .withNewMetadata()
                    .withName("jarvis-service")
                    .addToLabels("app", "jarvis")
                .endMetadata()
                .withNewSpec()
                    .withType("NodePort")
                    .withSelector(Map.of("app", "jarvis"))
                        .addNewPort()
                            .withPort(80)
                            .withTargetPort(new IntOrString(8080))
                            .withNodePort(30080)
                        .endPort()
                .endSpec()
        .build();

        //service.addOwnerReference(jarvisOperator);

        _LOG.info("Generated service {}", Serialization.asYaml(service));

        return service;
    }

snippet 4.16-namespace-and-status:
  prefix: "4.16-namespace-and-status"
  name: "4.16-namespace-and-status"
  scope: "java"
  body: |
    // Get namespace and status
    String namespace = resource.getMetadata().getNamespace();
    String statusDeployedRelease = (resource.getStatus() != null ? resource.getStatus().getDeployedRelase() : "");

    deploy = resource.getSpec().getDeploy();
    _LOG.info("Deploy Jarvis ? {}", deploy);

    // Get configuration
    resourceID = ResourceID.fromResource(resource);

snippet 4.17-deploy-jarvis:
  prefix: "4.17-deploy-jarvis"
  name: "4.17-deploy-jarvis"
  scope: "java"
  body: |
    if ("‚úÖ".equalsIgnoreCase(deploy) && currentRelease != null && currentRelease.trim().length() != 0
                && !currentRelease.equalsIgnoreCase(statusDeployedRelease)) {
        // 4.18-make-deployment

        // 4.19-make-service

        // 4.20-update-status
    }

snippet 4.18-make-deployment:
  prefix: "4.18-make-deployment"
  name: "4.18-make-deployment"
  scope: "java"
  body: |
    // Create deployment application
    _LOG.info("üîÄ Deploy the new release {} !", currentRelease);
    Deployment deployment = makeDeployment(currentRelease, resource);
    Deployment existingDeployment = client.apps().deployments().inNamespace(namespace)
            .withName(deployment.getMetadata().getName()).get();
    if (existingDeployment == null) {
        client.apps().deployments().inNamespace(namespace).resource(deployment).create();
    } else {
        client.apps().deployments().inNamespace(namespace).resource(deployment).update();
    }

snippet 4.19-make-service:
  prefix: "4.19-make-service"
  name: "4.19-make-service"
  scope: "java"
  body: |
    // Create service
    Service service = makeService(resource);
    Service existingService = client.services().inNamespace(resource.getMetadata().getNamespace())
            .withName(service.getMetadata().getName()).get();
    if (existingService == null) {
        client.services().inNamespace(namespace).resource(service).create();
    } else {
        client.services().inNamespace(namespace).resource(service).update();
    }

snippet 4.20-update-status:
  prefix: "4.20-update-status"
  name: "4.20-update-status"
  scope: "java"
  body: |
    // Update the status
    if (resource.getStatus() != null) {
        resource.getStatus().setDeployedRelase(currentRelease);
    } else {
        JarvisOperatorStatus jarvisOperatorStatus = new JarvisOperatorStatus();
        jarvisOperatorStatus.setDeployedRelase(currentRelease);
        resource.setStatus(jarvisOperatorStatus);
    }

snippet 4.21-apply-status-patch:
  prefix: "4.21-apply-status-patch"
  name: "4.21-apply-status-patch"
  scope: "java"
  body: |
    return UpdateControl.patchStatus(resource);

snippet 4.22-add-fire-event-method:
  prefix: "4.22-add-fire-event-method"
  name: "4.22-add-fire-event-method"
  scope: "java"
  body: |
    public void fireEvent(String tag) {
        if (resourceID != null) {
            currentRelease = tag;
            simpleInboundEventSource.propagateEvent(resourceID);
        } else {
            _LOG.info("üö´ No resource created, nothing to do.");
        }
    }

snippet 4.23-add-ref-and-ref-type-fields:
  prefix: "4.23-add-ref-and-ref-type-fields"
  name: "4.23-add-ref-and-ref-type-fields"
  scope: "java"
  body: |
    private String ref;
    private String ref_type;
    
    public String getRef() {
      return ref;
    }
    public void setRef(String ref) {
      this.ref = ref;
    }
    public String getRef_type() {
      return ref_type;
    }
    public void setRef_type(String ref_type) {
      this.ref_type = ref_type;
    }

snippet 4.24-inject-jarvis-operator:
  prefix: "4.24-inject-jarvis-operator"
  name: "4.24-inject-jarvis-operator"
  scope: "java"
  body: |
    @Inject
    private JarvisOperatorReconciler jarvisOperator;

snippet 4.25-add-new-tag-method:
  prefix: "4.25-add-new-tag-method"
  name: "4.25-add-new-tag-method"
  scope: "java"
  body: |
    @POST
    @Path("/event")
    @Consumes(MediaType.APPLICATION_JSON)
    public Response newTag(GHTagEvent tagEvent) {
      _LOG.info("‚öìÔ∏è Webhook called!!!!");

      if ("tag".equalsIgnoreCase(tagEvent.getRef_type())) {
        _LOG.info("üéâ New tag: {}", tagEvent.getRef());
      }

      jarvisOperator.fireEvent(tagEvent.getRef());
      return Response.ok().build();
    }

snippet 4.32-packaging-configuration:
  prefix: "4.32-packaging-configuration"
  name: "4.32-packaging-configuration"
  body: |
    # Image configuration
    quarkus.container-image.build=true
    quarkus.container-image.group=95y036e0.gra7.container-registry.ovh.net/devoxx
    quarkus.container-image.name=jarvis-operator

    # Kubernetes configuration
    quarkus.kubernetes.namespace=jarvis-operator
